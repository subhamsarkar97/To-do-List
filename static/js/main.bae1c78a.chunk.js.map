{"version":3,"sources":["ShowList.js","App.js","serviceWorker.js","index.js"],"names":["ShowList","props","listShow","list","map","element","className","key","type","value","text","onChange","e","setUpdate","target","icon","onClick","deleteItem","duration","easing","library","add","faTrash","App","addItem","preventDefault","newItem","state","currentItem","console","log","newItems","setState","handleInput","Date","now","items","filteredItems","filter","item","bind","id","onSubmit","this","placeholder","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uUA8BeA,EAzBE,SAACC,GACd,IACMC,EADOD,EAAME,KACGC,KAAK,SAAAC,GACvB,OAAO,yBAAKC,UAAU,OAAOC,IAAKF,EAAQE,KAC1C,2BACI,2BAAOC,KAAK,OAAOD,IAAKF,EAAQE,IAAKE,MAASJ,EAAQK,KAAMC,SAAY,SAACC,GAAD,OAAOX,EAAMY,UAAUD,EAAEE,OAAOL,MAAOJ,EAAQE,QACvH,8BACI,kBAAC,IAAD,CAAiBD,UAAU,SAASS,KAAK,QAAQC,QAAU,kBAAMf,EAAMgB,WAAWZ,EAAQE,cAMtG,OACI,6BACI,kBAAC,IAAD,CAAUW,SAAU,IAAKC,OAAO,eAC3BjB,K,eCdjBkB,IAAQC,IAAIC,K,IAwFGC,E,kDApFb,WAAYtB,GAAO,IAAD,8BAChB,cAAMA,IAeNuB,QAAU,SAACZ,GACTA,EAAEa,iBACF,IAAMC,EAAU,EAAKC,MAAMC,YAE3B,GADAC,QAAQC,IAAIJ,GACE,KAAXA,EAAc,CACf,IAAMK,EAAQ,sBAAO,EAAKJ,MAAMxB,MAAlB,CAAwBuB,IACtC,EAAKM,SAAS,CACZ7B,KAAM4B,EACNH,YAAY,CACVlB,KAAK,GACLH,IAAI,QA1BI,EAkChB0B,YAAc,SAACrB,GACb,EAAKoB,SAAS,CACZJ,YAAY,CACVlB,KAAME,EAAEE,OAAOL,MACfF,IAAK2B,KAAKC,UAtCA,EA2ChBtB,UAAY,SAACH,EAAKH,GACZ,IAAM6B,EAAQ,EAAKT,MAAMxB,KACzBiC,EAAMhC,KAAI,SAAAgC,GACLA,EAAM7B,MAAQA,IACf6B,EAAM1B,KAAOA,MAGjB,EAAKsB,SAAS,CACZ7B,KAAKiC,KAnDG,EAuDhBnB,WAAa,SAACV,GACZ,IAAM8B,EAAgB,EAAKV,MAAMxB,KAAKmC,QAAO,SAAAC,GAAI,OAAIA,EAAKhC,MAAOA,KACjE,EAAKyB,SAAS,CACV7B,KAAKkC,KAxDX,EAAKV,MAAQ,CACXxB,KAAK,GACLyB,YAAY,CACVlB,KAAK,GACLH,IAAI,KAGR,EAAKiB,QAAU,EAAKA,QAAQgB,KAAb,gBACf,EAAKP,YAAc,EAAKA,YAAYO,KAAjB,gBACnB,EAAKvB,WAAa,EAAKA,WAAWuB,KAAhB,gBAClB,EAAK3B,UAAY,EAAKA,UAAU2B,KAAf,gBAZD,E,qDA+Dd,OACI,yBAAKlC,UAAU,OACX,gCACI,0BAAMmC,GAAG,aAAaC,SAAYC,KAAKnB,SACnC,2BAAOhB,KAAK,OAAOoC,YAAY,aAAatC,UAAY,SAAWG,MAAQkC,KAAKhB,MAAMC,YAAYlB,KAAMC,SAAUgC,KAAKV,cACvH,4BAAQ3B,UAAU,MAAME,KAAK,UAA7B,SAKR,iCACI,yBAAKF,UAAU,aACX,kBAAC,EAAD,CAAUH,KAAQwC,KAAKhB,MAAMxB,KAAMc,WAAc0B,KAAK1B,WAAYJ,UAAa8B,KAAK9B,mB,GA7ExFgC,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.bae1c78a.chunk.js","sourcesContent":["import React from 'react'\r\nimport './ShowList.css'\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\nimport FlipMove from 'react-flip-move';\r\n\r\nconst ShowList = (props) => {\r\n    const list = props.list\r\n    const listShow = list.map( element => {\r\n        return(<div className=\"list\" key={element.key}>\r\n        <p>\r\n            <input type=\"text\" key={element.key} value = {element.text} onChange = {(e) => props.setUpdate(e.target.value, element.key)}/>\r\n            <span>\r\n                <FontAwesomeIcon className=\"faicon\" icon=\"trash\" onClick= {() => props.deleteItem(element.key)}/> \r\n            </span>\r\n        </p>\r\n        </div>)\r\n        }   \r\n    )\r\n    return(\r\n        <div>\r\n            <FlipMove duration={500} easing=\"ease-in-out\">\r\n                {listShow}\r\n            </FlipMove>\r\n        </div>\r\n    )\r\n\r\n\r\n\r\n}\r\n\r\nexport default ShowList","import React,{Component} from 'react';\nimport './App.css';\nimport ShowList from './ShowList'\nimport {library} from '@fortawesome/fontawesome-svg-core';\nimport {faTrash} from '@fortawesome/free-solid-svg-icons';\n\n\nlibrary.add(faTrash);\n\nclass App extends Component{\n    \n  constructor(props){\n    super(props);\n    this.state = {\n      list:[],\n      currentItem:{\n        text:'',\n        key:''\n      }\n    }\n    this.addItem = this.addItem.bind(this);\n    this.handleInput = this.handleInput.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.setUpdate = this.setUpdate.bind(this);\n    \n  }\n\n    addItem = (e) => {\n      e.preventDefault();\n      const newItem = this.state.currentItem\n      console.log(newItem)\n      if(newItem!== \"\"){\n        const newItems = [...this.state.list, newItem]\n        this.setState({\n          list: newItems,\n          currentItem:{\n            text:'',\n            key:''\n          }\n        })\n      }\n    }\n\n  \n    \n    handleInput = (e) => {\n      this.setState({\n        currentItem:{\n          text: e.target.value,\n          key: Date.now()\n        }\n      })\n    }\n\n    setUpdate = (text,key) => {\n          const items = this.state.list\n          items.map(items => {\n            if(items.key === key){\n              items.text = text\n              }\n          })\n          this.setState({\n            list:items\n          })\n        }\n\n    deleteItem = (key) => {\n      const filteredItems = this.state.list.filter(item => item.key!== key);\n      this.setState({\n          list:filteredItems\n      })\n    }\n    \n  render(){ \n      return(\n          <div className=\"app\">\n              <header>\n                  <form id=\"to-do-form\" onSubmit = {this.addItem}>\n                      <input type=\"text\" placeholder=\"Enter Text\" className = \"input1\"   value= {this.state.currentItem.text} onChange={this.handleInput}></input>\n                      <button className=\"btn\" type=\"submit\">Add</button>\n                  </form>\n              </header>\n              \n             \n              <section>\n                  <div className=\"List_Item\">\n                      <ShowList list = {this.state.list} deleteItem = {this.deleteItem} setUpdate = {this.setUpdate}/>\n                  </div> \n              </section> \n            \n          </div>\n      \n      )\n    } \n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}